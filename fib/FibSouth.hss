-- set-pp-coercion Omit
set-pp-type Abstract

  -- Start in the right spot
application-of 'transform

app-arg
unfold
up

unfold-rule "Acc-start"; assume
try (repeat (one-td case-reduce))

  -- Set up tail recursion transformation --
one-td (unfold-rule "abs-iterLoop-float"); assume
repeat (one-td let-subst)
one-td (unfold 'iterComp)
--one-td (unfold '$witerComp)


repeat (one-td case-elim)

one-td (unfold-rule "iterToWhile-intro"); assume
one-td (unfold 'iterToWhile)
  --stop-script
repeat (one-td let-subst)
repeat (one-td case-float-case)
one-td (unfold 'splitLoop)
one-td (unfold '$wsplitLoop)
smash
one-td (unfold-rule "while-abs-rep-intro-body"); assume

repeat (one-td (unfold '.))

one-bu (unfold 'splitLoop)
one-bu (unfold '$wsplitLoop)

repeat (one-td (beta-reduce >>> let-subst))
repeat (one-td case-reduce)
repeat (one-td (beta-reduce >>> let-subst))

smash
repeat (one-td (unfold 'getIter))
smash
one-td (unfold-rule "abs-rep-if"); assume
one-td (unfold-rule "cond-intro-abs"); assume
repeat (one-td case-elim)


repeat (one-td (unfold-rule "abs-float-triple")); assume
repeat (one-td let-subst)
repeat (one-td case-elim)

repeat (one-td (unfold-rule "abs-float-+")); assume
repeat (one-td (unfold-rule "abs-float--")); assume
repeat (one-td (unfold-rule ">*-intro")); assume
repeat (one-td case-elim)

repeat (one-td (unfold-rule "abs-float-triple1st")); assume
repeat (one-td (unfold-rule "abs-float-triple2nd")); assume
repeat (one-td (unfold-rule "abs-float-triple3rd")); assume

repeat (one-td case-elim)
repeat (one-td (unfold-rule "abs-rep-elim")); assume
smash

-- Transformation on last step:
one-td (unfold 'lastStep)
one-td beta-reduce
one-td let-float
one-td let-float
one-td let-float
one-td case-float-case
one-td (unfold-rule "cond-intro"); assume

repeat (one-td (unfold-rule ">*-intro"))
one-bu let-subst
one-bu case-elim
repeat (one-td (unfold-rule "abs-float-triple3rd"))
repeat (one-td (unfold-rule "abs-rep-elim"))
--stop-script















-- Finish
top
-- TODO: Unfold lastStep, then iterWhile one level and do abs-rep elimination
application-of 'transform
unfold-rule "Acc-finish"; assume
repeat (one-td case-reduce)
smash

one-td (unfold-rule "cond-T-intro-cond"); assume
repeat (one-td (unfold-rule ">*-intro"))
one-bu let-subst
one-bu case-elim
repeat (one-td (unfold-rule "abs-float-triple3rd"))
repeat (one-td (unfold-rule "abs-rep-elim"))

