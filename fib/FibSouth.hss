-- set-pp-coercion Omit
set-pp-type Abstract

  -- Start in the right spot
application-of 'transform

app-arg
unfold
up

unfold-rule "Acc-start"; assume
try (repeat (one-td case-reduce))

  -- Set up tail recursion transformation --
one-td (unfold-rule "abs-iterLoop-float"); assume
repeat (one-td let-subst)
one-td (unfold 'iterComp)
one-td (unfold '$witerComp)

repeat (one-td (beta-reduce >>> let-subst))

{ application-of 'getIter
  app-fun
  case-float-arg-lemma "getIter-float"; assume
}

smash

one-td (unfold-rule "iterToWhile-intro"); assume
one-td (unfold 'iterToWhile)
one-td (unfold 'splitLoop)
smash
repeat (one-td (unfold 'doneToId))
repeat (one-td (unfold '.))

repeat (one-td (unfold 'getIter))
smash

  -- Cond transformation --
one-td (unfold-rule "cond-intro-abs"); assume
repeat (one-td (unfold 'getCondition1))
repeat (one-td (unfold 'getCondition2))
smash

-- Push abs and rep into conditionals of loop body
one-td (unfold-rule "while-abs-rep-intro-body"); assume
repeat (one-td (unfold '.))
repeat (one-td (beta-reduce >>> let-subst))
repeat (one-td (unfold-rule "abs-rep-if")); assume

repeat (one-td (unfold-rule "abs-float-triple")); assume
repeat (one-td let-subst)
repeat (one-td case-elim)

repeat (one-td (unfold-rule "abs-float-+")); assume
repeat (one-td (unfold-rule "abs-float--")); assume
repeat (one-td (unfold-rule ">*-intro")); assume
repeat (one-td case-elim)

repeat (one-td (unfold-rule "abs-float-triple1st")); assume
repeat (one-td (unfold-rule "abs-float-triple2nd")); assume
repeat (one-td (unfold-rule "abs-float-triple3rd")); assume

repeat (one-td case-elim)
repeat (one-td (unfold-rule "abs-rep-elim")); assume
repeat (one-td case-elim)

-- -- Push abs and rep into conditionals of loop body
-- one-td (unfold-rule "while-abs-rep-intro-body"); assume
-- repeat (one-td (unfold '.))
-- repeat (one-td (beta-reduce >>> let-subst))
-- repeat (one-td (unfold-rule "abs-rep-if")); assume

repeat (one-td let-subst)
repeat (one-td case-elim)





-- -- Finish
-- top
-- TODO: Unfold lastStep, then iterWhile one level and do abs-rep elimination
-- application-of 'transform
-- unfold-rule "Acc-finish"; assume

